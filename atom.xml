<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shadynasty Business]]></title>
  <link href="http://shadynasty.biz/atom.xml" rel="self"/>
  <link href="http://shadynasty.biz/"/>
  <updated>2012-09-05T16:39:58-04:00</updated>
  <id>http://shadynasty.biz/</id>
  <author>
    <name><![CDATA[Jeff Wendling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Auth and Sessions]]></title>
    <link href="http://shadynasty.biz/blog/2012/09/05/auth-and-sessions/"/>
    <updated>2012-09-05T16:10:00-04:00</updated>
    <id>http://shadynasty.biz/blog/2012/09/05/auth-and-sessions</id>
    <content type="html"><![CDATA[<p>I think it&#8217;s time to bring the guestbook to the next level, and that means users
and sessions. This post will show you how to handle user registration and authentication.
Let&#8217;s get started!</p>

<!-- more -->


<h2>The User Type</h2>

<p>The first thing we&#8217;re going to do is create a type to store the information of
the user. So what do users have? Well, an ID to identify them in the database,
a username, and a password. To make this a little more fun, we&#8217;re also going to
store the number of times they&#8217;ve posted on the guestbook. So here&#8217;s our type:</p>

<figure class='code'><figcaption><span>user.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;code.google.com/p/go.crypto/bcrypt&quot;</span>
</span><span class='line'>  <span class="s">&quot;labix.org/v2/mgo/bson&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="n">User</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ID</span>       <span class="n">bson</span><span class="p">.</span><span class="n">ObjectId</span> <span class="s">`bson:&quot;_id,omitempty&quot;`</span>
</span><span class='line'>  <span class="n">Username</span> <span class="nb">string</span>
</span><span class='line'>  <span class="n">Password</span> <span class="p">[]</span><span class="nb">byte</span>
</span><span class='line'>  <span class="n">Posts</span>    <span class="nb">int</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now lets define some functions to help hash the password and set it on the user
and and authenticate a user given a username and password.</p>

<figure class='code'><figcaption><span>user.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">//SetPassword takes a plaintext password and hashes it with bcrypt and sets the</span>
</span><span class='line'><span class="c1">//password field to the hash.</span>
</span><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">u</span> <span class="p">*</span><span class="n">User</span><span class="p">)</span> <span class="n">SetPassword</span><span class="p">(</span><span class="n">password</span> <span class="nb">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">hpass</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">bcrypt</span><span class="p">.</span><span class="n">GenerateFromPassword</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="n">password</span><span class="p">),</span> <span class="n">bcrypt</span><span class="p">.</span><span class="n">DefaultCost</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="c1">//this is a panic because bcrypt errors on invalid costs</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">Password</span> <span class="p">=</span> <span class="n">hpass</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Login validates and returns a user object if they exist in the database.</span>
</span><span class='line'><span class="k">func</span> <span class="n">Login</span><span class="p">(</span><span class="n">ctx</span> <span class="p">*</span><span class="n">Context</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span> <span class="nb">string</span><span class="p">)</span> <span class="p">(</span><span class="n">u</span> <span class="p">*</span><span class="n">User</span><span class="p">,</span> <span class="n">err</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">err</span> <span class="p">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">C</span><span class="p">(</span><span class="s">&quot;users&quot;</span><span class="p">).</span><span class="n">Find</span><span class="p">(</span><span class="n">bson</span><span class="p">.</span><span class="n">M</span><span class="p">{</span><span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="n">username</span><span class="p">}).</span><span class="n">One</span><span class="p">(&amp;</span><span class="n">u</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">err</span> <span class="p">=</span> <span class="n">bcrypt</span><span class="p">.</span><span class="n">CompareHashAndPassword</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="n">Password</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="n">password</span><span class="p">))</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">u</span> <span class="p">=</span> <span class="n">nil</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now lets work on the handler to log them in.</p>

<h2>First Sign of Trouble</h2>

<p>The login handler should be pretty simple. All we have to do is get the username
and password from the form POSTed to the handler, and pass it to our Login function
which will grab the user from the database and authenticate the credentials.</p>

<figure class='code'><figcaption><span>handlers.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">login</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">ctx</span> <span class="p">*</span><span class="n">Context</span><span class="p">)</span> <span class="p">(</span><span class="n">err</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//grab the username and password from the form</span>
</span><span class='line'>  <span class="n">username</span><span class="p">,</span> <span class="n">password</span> <span class="p">:=</span> <span class="n">req</span><span class="p">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s">&quot;username&quot;</span><span class="p">),</span> <span class="n">req</span><span class="p">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s">&quot;password&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//log in the user</span>
</span><span class='line'>  <span class="n">user</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">Login</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//what to do now? if there was an error we want to present the form again</span>
</span><span class='line'>  <span class="c1">//with some error message.</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//where do we store the user if the login was valid?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//answer: sessions!</span>
</span><span class='line'>  <span class="n">_</span> <span class="p">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we ran into some trouble. When should we display the template for the form?
Where do we store that the authentication was correct? Fortunately it&#8217;s not too
hard to fix these problems. Lets handle the displaying of the template part first.</p>

<h2>Two Handlers Are Better Than One</h2>

<p>The login handler is really two actions. When a GET request is passed to the handler
it should display a nice form, but when a POST request is passed to the handler
it should authenticate a user. These different actions based on the verb used
on the URL means we should dispatch to the correct handler in the router rather
than the handler itself. Lets write the simple form displaying template first.</p>

<figure class='code'><figcaption><span>handlers.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">login</span> <span class="p">=</span> <span class="n">parseTemplate</span><span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;templates/_base.html&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;templates/login.html&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">loginForm</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">ctx</span> <span class="p">*</span><span class="n">Context</span><span class="p">)</span> <span class="p">(</span><span class="n">err</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">err</span> <span class="p">=</span> <span class="n">login</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code was getting &#8220;smelly&#8221; because it wasn&#8217;t nice to have global variables storing
the templates, so it wasn&#8217;t too hard to whip up a simple function to compile templates
and cache them on the fly. Here&#8217;s what that looks like, and the new handler using it:</p>

<figure class='code'><figcaption><span>template.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;html/template&quot;</span>
</span><span class='line'>  <span class="s">&quot;path/filepath&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">cachedTemplates</span> <span class="p">=</span> <span class="k">map</span><span class="p">[</span><span class="nb">string</span><span class="p">]*</span><span class="n">template</span><span class="p">.</span><span class="n">Template</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">funcs</span> <span class="p">=</span> <span class="n">template</span><span class="p">.</span><span class="n">FuncMap</span><span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;reverse&quot;</span><span class="p">:</span> <span class="n">reverse</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">T</span><span class="p">(</span><span class="n">name</span> <span class="nb">string</span><span class="p">)</span> <span class="p">*</span><span class="n">template</span><span class="p">.</span><span class="n">Template</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">t</span><span class="p">,</span> <span class="n">ok</span> <span class="p">:=</span> <span class="n">cachedTemplates</span><span class="p">[</span><span class="n">name</span><span class="p">];</span> <span class="n">ok</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">t</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t</span> <span class="p">:=</span> <span class="n">template</span><span class="p">.</span><span class="n">New</span><span class="p">(</span><span class="s">&quot;_base.html&quot;</span><span class="p">).</span><span class="n">Funcs</span><span class="p">(</span><span class="n">funcs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t</span> <span class="p">=</span> <span class="n">template</span><span class="p">.</span><span class="n">Must</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">ParseFiles</span><span class="p">(</span>
</span><span class='line'>      <span class="s">&quot;templates/_base.html&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">filepath</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="s">&quot;templates&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">),</span>
</span><span class='line'>  <span class="p">))</span>
</span><span class='line'>  <span class="n">cachedTemplates</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="p">=</span> <span class="n">t</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">t</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>handlers.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">loginForm</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">ctx</span> <span class="p">*</span><span class="n">Context</span><span class="p">)</span> <span class="p">(</span><span class="n">err</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">T</span><span class="p">(</span><span class="s">&quot;login.html&quot;</span><span class="p">).</span><span class="n">Execute</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Login Template </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{ define "title" }}Guestbook - Login{{ end }}
</span><span class='line'>
</span><span class='line'>{{ define "content" }}
</span><span class='line'>    &lt;h1>Login&lt;/h1>
</span><span class='line'>    &lt;form action="{{ reverse "login" }}" method="POST">
</span><span class='line'>        &lt;p>Username: &lt;input type="text" name="username">&lt;/p>
</span><span class='line'>        &lt;p>Password: &lt;input type="password" name="password">&lt;/p>
</span><span class='line'>        &lt;p>&lt;button>Login&lt;/button>&lt;/p>
</span><span class='line'>    &lt;/form>
</span><span class='line'>{{ end }}</span></code></pre></td></tr></table></div></figure>


<p>At this point I had a working login page that would 404 when you clicked Login.
There were some smaller changes made around to clean things up that you can see
in <a href="https://github.com/zeebo/gostbook/commit/50d85a72495ac676db9301df45f84ca1cbf96702">this commit</a> (I have annotated the commit to include
some comments on the changes.) Let&#8217;s add the login form handling now.</p>

<h2>Sessions</h2>

<p>A session is just some data attached to some id that you hand the client in a cookie.
This way when a client requests a page, you can look at the cookie value and get the
id for the data and load up the data for that request. Tada! Sessions! For our
implementation of sessions, we&#8217;re once again going to use the excellent
<a href="http://gorilla-web.appspot.com/pkg/sessions">gorilla</a> package for sessions. It lets you use different stores
for the backend data, and in this case we&#8217;re just going to use a <a href="http://gorilla-web.appspot.com/pkg/sessions#CookieStore">cookie store</a>.
This stores all the data in the cookie the client sends to you. This does mean
that the user can tamper with the cookie, but the data is verified using a secret
value and a hash, and can optionally be encrypted with another secret value. For this
I&#8217;m just going to use a store that doesn&#8217;t encrypt the data: after all, the data
the store uses is open source.</p>

<figure class='code'><figcaption><span>main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;code.google.com/p/gorilla/sessions&quot;</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">store</span> <span class="n">sessions</span><span class="p">.</span><span class="n">Store</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="n">store</span> <span class="p">=</span> <span class="n">sessions</span><span class="p">.</span><span class="n">NewCookieStore</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">&quot;KEY&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we defined a cookie store, now let&#8217;s add grabbing the session to the context.</p>

<figure class='code'><figcaption><span>context.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">Context</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Database</span> <span class="p">*</span><span class="n">mgo</span><span class="p">.</span><span class="n">Database</span>
</span><span class='line'>  <span class="n">Session</span>  <span class="p">*</span><span class="n">sessions</span><span class="p">.</span><span class="n">Session</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">NewContext</span><span class="p">(</span><span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">(*</span><span class="n">Context</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">sess</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">store</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="s">&quot;gostbook&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">&amp;</span><span class="n">Context</span><span class="p">{</span>
</span><span class='line'>      <span class="n">Database</span><span class="p">:</span> <span class="n">session</span><span class="p">.</span><span class="n">Clone</span><span class="p">().</span><span class="n">DB</span><span class="p">(</span><span class="n">database</span><span class="p">),</span>
</span><span class='line'>      <span class="n">Session</span><span class="p">:</span>  <span class="n">sess</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span> <span class="n">err</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last thing we need to do is make sure the handlers save the session when they&#8217;re
done with it. Unfortunately this causes a problem. Saving the session requires
modifying the headers of the response, and if the handler has already started
outputting data, the headers have already been sent and that ship has sailed.
Theres two approaches to solving this problem. The first is to just make sure
in each handler to save the session before writing anything to the <code>ResponseWriter</code>,
which can be a little verbose and error prone but provides the best performance.
The second is to use the fact that a <code>ResponseWriter</code> is an interface and use our
handler type to substitute in a buffered <code>ResponseWriter</code> that stores all the data
and header information written to it, so that it can be output at the end all at once.
I wrote a package to help with the second option so it&#8217;s clearly the one I prefer.
Here&#8217;s how we can hook that up:</p>

<figure class='code'><figcaption><span>http.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;thegoods.biz/httpbuf&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="n">handler</span> <span class="k">func</span><span class="p">(</span><span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">,</span> <span class="p">*</span><span class="n">Context</span><span class="p">)</span> <span class="n">error</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">h</span> <span class="n">handler</span><span class="p">)</span> <span class="n">ServeHTTP</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//create the context</span>
</span><span class='line'>  <span class="n">ctx</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">NewContext</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="n">ctx</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//run the handler and grab the error, and report it</span>
</span><span class='line'>  <span class="n">buf</span> <span class="p">:=</span> <span class="nb">new</span><span class="p">(</span><span class="n">httpbuf</span><span class="p">.</span><span class="n">Buffer</span><span class="p">)</span>
</span><span class='line'>  <span class="n">err</span> <span class="p">=</span> <span class="n">h</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//save the session</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">Session</span><span class="p">.</span><span class="n">Save</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//apply the buffered response to the writer</span>
</span><span class='line'>  <span class="n">buf</span><span class="p">.</span><span class="n">Apply</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All we do is create an <code>httpbuf.Buffer</code> and use that as our handler, finishing
with a call to its Apply method. With that, we can set and grab session values
in the handlers by just interacting with <code>ctx.Session</code>, and everthing will be
saved when <a href="https://github.com/zeebo/gostbook/commit/85b30a6efb917ab8567d3d277d5373b3e12a7f67">we&#8217;re done</a>.</p>

<h2>Back to Authentication</h2>

<p>Now that we have sessions, we know where we can store the user. Lets write the
login handler for the user then.</p>

<figure class='code'><figcaption><span>handlers.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">login</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">ctx</span> <span class="p">*</span><span class="n">Context</span><span class="p">)</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">username</span><span class="p">,</span> <span class="n">password</span> <span class="p">:=</span> <span class="n">req</span><span class="p">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s">&quot;username&quot;</span><span class="p">),</span> <span class="n">req</span><span class="p">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s">&quot;password&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">user</span><span class="p">,</span> <span class="n">e</span> <span class="p">:=</span> <span class="n">Login</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">e</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">ctx</span><span class="p">.</span><span class="n">Session</span><span class="p">.</span><span class="n">AddFlash</span><span class="p">(</span><span class="s">&quot;Invalid Username/Password&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">loginForm</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//store the user id in the values and redirect to index</span>
</span><span class='line'>  <span class="n">ctx</span><span class="p">.</span><span class="n">Session</span><span class="p">.</span><span class="n">Values</span><span class="p">[</span><span class="s">&quot;user&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">user</span><span class="p">.</span><span class="n">ID</span>
</span><span class='line'>  <span class="n">http</span><span class="p">.</span><span class="n">Redirect</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">reverse</span><span class="p">(</span><span class="s">&quot;index&quot;</span><span class="p">),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusSeeOther</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/gob&quot;</span>
</span><span class='line'>  <span class="s">&quot;labix.org/v2/mgo/bson&quot;</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">gob</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="n">bson</span><span class="p">.</span><span class="n">ObjectId</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="n">router</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;POST&quot;</span><span class="p">,</span> <span class="s">&quot;/login&quot;</span><span class="p">,</span> <span class="n">handler</span><span class="p">(</span><span class="n">login</span><span class="p">))</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we have to register the <code>bson.ObjectId</code> type with the <a href="http://golang.org/pkg/encoding/gob">gob package</a>
because the cookie store uses gob to store the data for the session.</p>

<p>Well, now we log in people and store it in the session, but it&#8217;d be nice if that
was reflected somehow in the user interface and if the context included information
about the logged in user. Lets do some work on the context and handlers to fix this.
First, we&#8217;re going to add a <code>*User</code> to the context that gets filled in based on the
id we stored in the session.</p>

<figure class='code'><figcaption><span>context.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">Context</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Database</span> <span class="p">*</span><span class="n">mgo</span><span class="p">.</span><span class="n">Database</span>
</span><span class='line'>  <span class="n">Session</span>  <span class="p">*</span><span class="n">sessions</span><span class="p">.</span><span class="n">Session</span>
</span><span class='line'>  <span class="n">User</span>     <span class="p">*</span><span class="n">User</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">NewContext</span><span class="p">(</span><span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">(*</span><span class="n">Context</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">sess</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">store</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="s">&quot;gostbook&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ctx</span> <span class="p">:=</span> <span class="p">&amp;</span><span class="n">Context</span><span class="p">{</span>
</span><span class='line'>      <span class="n">Database</span><span class="p">:</span> <span class="n">session</span><span class="p">.</span><span class="n">Clone</span><span class="p">().</span><span class="n">DB</span><span class="p">(</span><span class="n">database</span><span class="p">),</span>
</span><span class='line'>      <span class="n">Session</span><span class="p">:</span>  <span class="n">sess</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ctx</span><span class="p">,</span> <span class="n">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//try to fill in the user from the session</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">uid</span><span class="p">,</span> <span class="n">ok</span> <span class="p">:=</span> <span class="n">sess</span><span class="p">.</span><span class="n">Values</span><span class="p">[</span><span class="s">&quot;user&quot;</span><span class="p">].(</span><span class="n">bson</span><span class="p">.</span><span class="n">ObjectId</span><span class="p">);</span> <span class="n">ok</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">err</span> <span class="p">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">C</span><span class="p">(</span><span class="s">&quot;users&quot;</span><span class="p">).</span><span class="n">Find</span><span class="p">(</span><span class="n">bson</span><span class="p">.</span><span class="n">M</span><span class="p">{</span><span class="s">&quot;_id&quot;</span><span class="p">:</span> <span class="n">uid</span><span class="p">}).</span><span class="n">One</span><span class="p">(&amp;</span><span class="n">ctx</span><span class="p">.</span><span class="n">User</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">ctx</span><span class="p">,</span> <span class="n">err</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we just have to add the context to the value we pass in to templates to be
executed and hook up the templates. <a href="https://github.com/zeebo/gostbook/commit/7c2ff89f944d78cb51033c3ac5eeedd4ab552126">This commit</a> shows the
details of that, including adding a logout handler, and fixing some minor issues
with the code.</p>

<h2>Post Count and Creating Users</h2>

<p>The last two features we need are letting people register and increasing a persons
post count when they post. Let&#8217;s work on registration first. Registration works
just like logging in, so we need to create a template and two handlers.</p>

<figure class='code'><figcaption><span>handlers.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">registerForm</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">ctx</span> <span class="p">*</span><span class="n">Context</span><span class="p">)</span> <span class="p">(</span><span class="n">err</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">T</span><span class="p">(</span><span class="s">&quot;register.html&quot;</span><span class="p">).</span><span class="n">Execute</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="k">map</span><span class="p">[</span><span class="nb">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{}{</span>
</span><span class='line'>      <span class="s">&quot;ctx&quot;</span><span class="p">:</span> <span class="n">ctx</span><span class="p">,</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">register</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">ctx</span> <span class="p">*</span><span class="n">Context</span><span class="p">)</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">username</span><span class="p">,</span> <span class="n">password</span> <span class="p">:=</span> <span class="n">req</span><span class="p">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s">&quot;username&quot;</span><span class="p">),</span> <span class="n">req</span><span class="p">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s">&quot;password&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">u</span> <span class="p">:=</span> <span class="p">&amp;</span><span class="n">User</span><span class="p">{</span>
</span><span class='line'>      <span class="n">Username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
</span><span class='line'>      <span class="n">ID</span><span class="p">:</span>       <span class="n">bson</span><span class="p">.</span><span class="n">NewObjectId</span><span class="p">(),</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">SetPassword</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">C</span><span class="p">(</span><span class="s">&quot;users&quot;</span><span class="p">).</span><span class="n">Insert</span><span class="p">(</span><span class="n">u</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">ctx</span><span class="p">.</span><span class="n">Session</span><span class="p">.</span><span class="n">AddFlash</span><span class="p">(</span><span class="s">&quot;Problem registering user.&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">registerForm</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//store the user id in the values and redirect to index</span>
</span><span class='line'>  <span class="n">ctx</span><span class="p">.</span><span class="n">Session</span><span class="p">.</span><span class="n">Values</span><span class="p">[</span><span class="s">&quot;user&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">u</span><span class="p">.</span><span class="n">ID</span>
</span><span class='line'>  <span class="n">http</span><span class="p">.</span><span class="n">Redirect</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">reverse</span><span class="p">(</span><span class="s">&quot;index&quot;</span><span class="p">),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusSeeOther</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>register.html</code> template is very similar to the login template. If you really
wan&#8217;t to see it, you can find it at <a href="https://github.com/zeebo/gostbook/commit/46bf28e9f862d083e6a40d813ff3f271bf96a5f1">this commit</a>. Incrementing
the post count is super simple. In the <code>sign</code> handler, we just add</p>

<pre><code>ctx.C("users").Update(bson.M{"_id": ctx.User.ID}, bson.M{
    "$inc": bson.M{"posts": 1},
})
</code></pre>

<h2>Phew!</h2>

<p>So after all that we have a login/user registration system, and a session tied
to a context for storing whatever data we want. Hopefully with this guide you can
extend it to meet the needs of whatever webapp you&#8217;re writing. Thanks for reading
so far, and be sure to <a href="http://tranquil-refuge-9104.herokuapp.com">register and leave a comment</a> on the gostbook or
right below if you liked it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Template Usage and Internals]]></title>
    <link href="http://shadynasty.biz/blog/2012/08/18/template-usage-and-internals/"/>
    <updated>2012-08-18T11:51:00-04:00</updated>
    <id>http://shadynasty.biz/blog/2012/08/18/template-usage-and-internals</id>
    <content type="html"><![CDATA[<p>I&#8217;ve seen many tutorials on the internet about how to use templates in Go. They
typically concentrate on the syntax of the template and don&#8217;t go in to the details
of how they&#8217;re constructed and used in Go code. That&#8217;s why this article is about
what a template really is, and how to use them in your code.</p>

<!-- more -->


<h2>A little history</h2>

<p>Back before Go 1, the <a href="http://golang.org/pkg/text/template">text/template</a> package was different.
The real major difference was the package defined two major types: a template
and a template set. At some point the library authors decided to merge them into
one, the <a href="http://golang.org/pkg/text/template/#Template">Template</a> type.</p>

<h2>So what is a template?</h2>

<p>I like to think of a template as a collection of templates, with one promoted
as the &#8220;default&#8221; template. The default template is the one that gets used when
the execute method is called. Internally, a template contains a map of all the
other templates it is linked with, and each one of those templates contains
the same map. This makes the namespace of a template flat. It sounds really
confusing, so hopefully we can make it easier with some examples and implications.</p>

<h2>Implications</h2>

<p>So given that a template is really a set of templates with a mapping of all the
template names in the set to the templates (phew), what can we expect in how
we work with it?</p>

<ul>
<li><p><strong>Every template in the set can be called by any other.</strong> Because every template
shares the same map of name to templates, any template can call any other templates.
This is a pretty simple.</p></li>
<li><p><strong>You can&#8217;t have two templates with the same name.</strong> This is also pretty obvious
but bears stating. Because the namespace is flat, two template with the same name
would cause a collision. The package doesn&#8217;t allow you to add a template to a set
under a name that already exists.</p></li>
<li><p><strong>Theres no such thing as a subtemplate.</strong> Because the namespace is flat, you can&#8217;t
really have one template be a subtemplate of another. Because every template is accessible
from every other template, the concept of one template owning another isn&#8217;t really
defined. This isn&#8217;t to say you can&#8217;t use templates like subtemplates, its just that
theres no mechanism enforcing this in the package.</p></li>
<li><p><strong>Lookup is idempotent.</strong> This means that calling <code>t.Lookup("name").Lookup("name")</code>
is the same as <code>t.Lookup("name")</code>, as long as <code>"name"</code> exists in the template. This
is because every template shares the same map of template name to template. When we
lookup a specific one, it still has the same map to lookup the next one. This is
a handy property because it makes it always safe to call Lookup regardless of the
current state of the template.</p></li>
</ul>


<h2>Gotchas</h2>

<p>Here&#8217;s some common problems with the template package that people run into:</p>

<ul>
<li><p><strong>ParseFiles and its friends add the template under the name of the file.</strong> This means
if you do <code>template.New("base").ParseFiles("foo.html")</code> and try to execute it, you will
have an empty template. The template was read and parsed from &#8220;foo.html&#8221; and added to the
template under that name. This means you have to either do a <code>.Lookup("foo.html")</code> or
change the name in New to &#8220;foo.html&#8221;.</p></li>
<li><p><strong>Not just the name of the file, the basename of the file.</strong> This means if you
try to do <code>.ParseFiles("a/main.html", "b/main.html")</code> you&#8217;ll run into problems
because the two files share the same basename. It returns an error saying that
you can&#8217;t redefine the template named &#8220;main.html&#8221;.</p></li>
<li><p><strong>Functions must be added before parsing.</strong> During parse time, the template package
needs to know all the identifiers that could be used to parse a template correctly.
This means that you need to set the function map before you do any parsing.
This can make the code a little longer, especially when you start with
a simple <code>template.ParseFiles</code> and need to add functions to it.</p></li>
</ul>


<h2>Quiz time</h2>

<p>Now that we know more about how templates work and some common gotchas, lets look
at some code and have a quiz. Here&#8217;s how the quiz works: I&#8217;ll show you a piece
of sample code consisting of some files, and you tell me the output.
The answers are at the bottom of this post.</p>

<h3>Question 1</h3>

<figure class='code'><figcaption><span>main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;text/template&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">t</span> <span class="p">:=</span> <span class="n">template</span><span class="p">.</span><span class="n">Must</span><span class="p">(</span><span class="n">template</span><span class="p">.</span><span class="n">New</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">).</span><span class="n">ParseFiles</span><span class="p">(</span><span class="s">&quot;main.html&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">t</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Stdout</span><span class="p">,</span> <span class="n">nil</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>main.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Hello World!
</span></code></pre></td></tr></table></div></figure>


<h3>Question 2</h3>

<figure class='code'><figcaption><span>main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;text/template&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">t</span> <span class="p">:=</span> <span class="n">template</span><span class="p">.</span><span class="n">Must</span><span class="p">(</span><span class="n">template</span><span class="p">.</span><span class="n">ParseFiles</span><span class="p">(</span><span class="s">&quot;main.html&quot;</span><span class="p">,</span> <span class="s">&quot;sub.html&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">t</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Stdout</span><span class="p">,</span> <span class="n">nil</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>main.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{ template &quot;sub.html&quot; }}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>sub.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Hello World!
</span></code></pre></td></tr></table></div></figure>


<h3>Question 3</h3>

<figure class='code'><figcaption><span>main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;text/template&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">greet</span><span class="p">()</span> <span class="nb">string</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;Hello World!&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">t</span> <span class="p">:=</span> <span class="n">template</span><span class="p">.</span><span class="n">Must</span><span class="p">(</span><span class="n">template</span><span class="p">.</span><span class="n">New</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">).</span><span class="n">Parse</span><span class="p">(</span><span class="s">`{{ greet }}`</span><span class="p">))</span>
</span><span class='line'>  <span class="n">t</span><span class="p">.</span><span class="n">Funcs</span><span class="p">(</span><span class="n">template</span><span class="p">.</span><span class="n">FuncMap</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;greet&quot;</span><span class="p">:</span> <span class="n">greet</span><span class="p">,</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">t</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Stdout</span><span class="p">,</span> <span class="n">nil</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Answers</h2>

<ul>
<li><p><em>Question 1</em>: Nothing. The &#8220;foo&#8221; template is the &#8220;active&#8221; template and it&#8217;s
empty. Did you read the Gotchas?</p></li>
<li><p><em>Question 2</em>: &#8220;Hello World!&#8221;. Nothing tricky about this one. Interesting fact:
if we reversed the order of the parsed files it would be the same output, even though
it does something totally different. <em>(Why?)</em></p></li>
<li><p><em>Question 3</em>: A panic. We don&#8217;t have the functions in the template at the time of
the parsing, so an error is returned and <code>Must</code> causes a panic. This is Gotcha number 3.</p></li>
</ul>


<h2>Conclusion</h2>

<p>So how did you do? I admit, some of the questions were tricks and subtle so it&#8217;s
ok if you got some (all) of them wrong, but all of them were inspired by common
problems I&#8217;ve seen people have. Templates are actually pretty simple, but they
have some non-obvious properties that require some care in how they are created
and used in your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Painless Web Handlers in Go]]></title>
    <link href="http://shadynasty.biz/blog/2012/08/07/painless-web-handlers-in-go/"/>
    <updated>2012-08-07T14:13:00-04:00</updated>
    <id>http://shadynasty.biz/blog/2012/08/07/painless-web-handlers-in-go</id>
    <content type="html"><![CDATA[<p><a href="http://shadynasty.biz/blog/2012/07/30/quick-and-clean-in-go/">Last time</a> we made a little guestbook application, but there were a
couple pain points. We had to have some boiler plate at the top of
all of the handlers, and errors were handled by copying the same line of code
everywhere. We also had fixed url paths hard coded in handlers and templates.
Let&#8217;s see how we can fix that.</p>

<!-- more -->


<h2>Adding context</h2>

<p>A lot of the boiler plate in the handlers last time had to do with the database
for each request, so let&#8217;s start by cleaning that up. How we do this is by
creating a type that will have the context for the request.</p>

<figure class='code'><figcaption><span>context.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;labix.org/v2/mgo&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="n">Context</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Database</span> <span class="p">*</span><span class="n">mgo</span><span class="p">.</span><span class="n">Database</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="p">*</span><span class="n">Context</span><span class="p">)</span> <span class="n">Close</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">c</span><span class="p">.</span><span class="n">Database</span><span class="p">.</span><span class="n">Session</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">NewContext</span><span class="p">(</span><span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">(*</span><span class="n">Context</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">&amp;</span><span class="n">Context</span><span class="p">{</span>
</span><span class='line'>      <span class="n">Database</span><span class="p">:</span> <span class="n">session</span><span class="p">.</span><span class="n">Clone</span><span class="p">().</span><span class="n">DB</span><span class="p">(</span><span class="n">database</span><span class="p">),</span>
</span><span class='line'>  <span class="p">},</span> <span class="n">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A context is the general context the request will use to make decisions, bundled
up with the handles to the resources it needs to perform actions. Right now we
only have the database. Let&#8217;s change our handlers to use the new context.</p>

<figure class='code'><figcaption><span>main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">hello</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ctx</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">NewContext</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="n">ctx</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//set up the collection and query</span>
</span><span class='line'>  <span class="n">coll</span> <span class="p">:=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">Database</span><span class="p">.</span><span class="n">C</span><span class="p">(</span><span class="s">&quot;entries&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">query</span> <span class="p">:=</span> <span class="n">coll</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="n">nil</span><span class="p">).</span><span class="n">Sort</span><span class="p">(</span><span class="s">&quot;-timestamp&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//execute the query</span>
</span><span class='line'>  <span class="c1">//TODO: add pagination :)</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">entries</span> <span class="p">[]</span><span class="n">Entry</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">query</span><span class="p">.</span><span class="n">All</span><span class="p">(&amp;</span><span class="n">entries</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//execute the template</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">index</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">entries</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">sign</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//make sure we got post</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">req</span><span class="p">.</span><span class="n">Method</span> <span class="p">!=</span> <span class="s">&quot;POST&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">NotFound</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">req</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">entry</span> <span class="p">:=</span> <span class="n">NewEntry</span><span class="p">()</span>
</span><span class='line'>  <span class="n">entry</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">req</span><span class="p">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">entry</span><span class="p">.</span><span class="n">Message</span> <span class="p">=</span> <span class="n">req</span><span class="p">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s">&quot;message&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">entry</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">entry</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Some dummy who forgot a name&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">entry</span><span class="p">.</span><span class="n">Message</span> <span class="p">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">entry</span><span class="p">.</span><span class="n">Message</span> <span class="p">=</span> <span class="s">&quot;Some dummy who forgot a message.&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ctx</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">NewContext</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="n">ctx</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">coll</span> <span class="p">:=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">Database</span><span class="p">.</span><span class="n">C</span><span class="p">(</span><span class="s">&quot;entries&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">coll</span><span class="p">.</span><span class="n">Insert</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">http</span><span class="p">.</span><span class="n">Redirect</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusTemporaryRedirect</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now thats wonderful, but it looks like we just made it worse.</p>

<h2>The magic of interfaces</h2>

<p>To fix this, we&#8217;re going to create a new handler type, and give it a
<code>ServeHTTP</code> method. This new handler type will handle creating/closing
the context, and handling any errors that arise. Here&#8217;s the definition:</p>

<figure class='code'><figcaption><span>http.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="n">handler</span> <span class="k">func</span><span class="p">(</span><span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">,</span> <span class="p">*</span><span class="n">Context</span><span class="p">)</span> <span class="n">error</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="p">(</span><span class="n">h</span> <span class="n">handler</span><span class="p">)</span> <span class="n">ServeHTTP</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//create the context</span>
</span><span class='line'>  <span class="n">ctx</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">NewContext</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="n">ctx</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//run the handler and grab the error, and report it</span>
</span><span class='line'>  <span class="n">err</span> <span class="p">=</span> <span class="n">h</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>handler</code> type is a function type, meaning any function with that signature
can be cast to that type. We define a method on the function (I know!) so that
the net/http package can use it as though it were any other handler. We&#8217;ve
already been doing something very similar to this already. When we called the
<code>http.HandleFunc</code> function in our <code>main.go</code>, we&#8217;ve been using our functions
as the type <code>http.HandlerFunc</code> which defines a ServeHTTP method, just like ours.
See, it&#8217;s not so bad. Here&#8217;s what the new handlers look like:</p>

<figure class='code'><figcaption><span>handlers.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">hello</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">ctx</span> <span class="p">*</span><span class="n">Context</span><span class="p">)</span> <span class="p">(</span><span class="n">err</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//set up the collection and query</span>
</span><span class='line'>  <span class="n">coll</span> <span class="p">:=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">Database</span><span class="p">.</span><span class="n">C</span><span class="p">(</span><span class="s">&quot;entries&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">query</span> <span class="p">:=</span> <span class="n">coll</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="n">nil</span><span class="p">).</span><span class="n">Sort</span><span class="p">(</span><span class="s">&quot;-timestamp&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//execute the query</span>
</span><span class='line'>  <span class="c1">//TODO: add pagination :)</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">entries</span> <span class="p">[]</span><span class="n">Entry</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">=</span> <span class="n">query</span><span class="p">.</span><span class="n">All</span><span class="p">(&amp;</span><span class="n">entries</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//execute the template</span>
</span><span class='line'>  <span class="n">err</span> <span class="p">=</span> <span class="n">index</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">entries</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">sign</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">ctx</span> <span class="p">*</span><span class="n">Context</span><span class="p">)</span> <span class="p">(</span><span class="n">err</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//make sure we got post</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">req</span><span class="p">.</span><span class="n">Method</span> <span class="p">!=</span> <span class="s">&quot;POST&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">NotFound</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">req</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">entry</span> <span class="p">:=</span> <span class="n">NewEntry</span><span class="p">()</span>
</span><span class='line'>  <span class="n">entry</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">req</span><span class="p">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">entry</span><span class="p">.</span><span class="n">Message</span> <span class="p">=</span> <span class="n">req</span><span class="p">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s">&quot;message&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">entry</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">entry</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Some dummy who forgot a name&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">entry</span><span class="p">.</span><span class="n">Message</span> <span class="p">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">entry</span><span class="p">.</span><span class="n">Message</span> <span class="p">=</span> <span class="s">&quot;Some dummy who forgot a message.&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">coll</span> <span class="p">:=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">Database</span><span class="p">.</span><span class="n">C</span><span class="p">(</span><span class="s">&quot;entries&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">=</span> <span class="n">coll</span><span class="p">.</span><span class="n">Insert</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">http</span><span class="p">.</span><span class="n">Redirect</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusTemporaryRedirect</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much better! Let&#8217;s commit that.</p>

<h2>Routing</h2>

<p>The other pain points, hard coded urls, and checking the request method,
are going to be handled by more advanced routing. For this, we&#8217;re going
to use the execllent <a href="http://gorilla-web.appspot.com">gorilla web toolkit</a>, specifically the
<a href="http://gorilla-web.appspot.com/pkg/pat">gorilla/pat</a> package. I really like the simple API it provides
with easy parameter capturing from the url. It&#8217;s very easy to use with the
<code>net/http</code> package:</p>

<figure class='code'><figcaption><span>main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">err</span> <span class="n">error</span>
</span><span class='line'>  <span class="n">u</span> <span class="p">:=</span> <span class="n">os</span><span class="p">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">&quot;DATABASE_URL&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">parsed</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">url</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">database</span> <span class="p">=</span> <span class="n">parsed</span><span class="p">.</span><span class="n">Path</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'>  <span class="n">session</span><span class="p">,</span> <span class="n">err</span> <span class="p">=</span> <span class="n">mgo</span><span class="p">.</span><span class="n">Dial</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">r</span> <span class="p">:=</span> <span class="n">pat</span><span class="p">.</span><span class="n">New</span><span class="p">()</span>
</span><span class='line'>  <span class="n">r</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;GET&quot;</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">handler</span><span class="p">(</span><span class="n">hello</span><span class="p">)).</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;index&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">r</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;POST&quot;</span><span class="p">,</span> <span class="s">&quot;/sign&quot;</span><span class="p">,</span> <span class="n">handler</span><span class="p">(</span><span class="n">sign</span><span class="p">)).</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;sign&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">=</span> <span class="n">http</span><span class="p">.</span><span class="n">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:&quot;</span><span class="p">+</span><span class="n">os</span><span class="p">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">&quot;PORT&quot;</span><span class="p">),</span> <span class="n">r</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One important and easy to miss detail is we now pass the router in as the
second argument to the <code>http.ListenAndServe</code> call. Now we can remove the check
that the method is <code>POST</code> in the <code>sign</code> handler, as the router takes care of that
for us. Lets move on to fixing the hard coded entries.</p>

<h2>Reversing URLs</h2>

<p>If you&#8217;ll notice, we gave the handlers a <code>.Name</code> call. The <a href="http://gorilla-web.appspot.com/pkg/pat">gorilla/pat</a>
package returns a <code>*mux.Router</code> for us to work with. Using that we can have the
router rebuild urls from the names. For example, if we wanted to grab the url for
the index page, we could use</p>

<pre><code>r.GetRoute("index").URL()
</code></pre>

<p>but since <code>r</code> is inaccessable outside the <code>main</code> function, we have to move it
into a higher scope. Let&#8217;s do that.</p>

<figure class='code'><figcaption><span>main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">router</span> <span class="p">*</span><span class="n">pat</span><span class="p">.</span><span class="n">Router</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">router</span> <span class="p">=</span> <span class="n">pat</span><span class="p">.</span><span class="n">New</span><span class="p">()</span>
</span><span class='line'>  <span class="n">router</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;GET&quot;</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">handler</span><span class="p">(</span><span class="n">hello</span><span class="p">)).</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;index&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">router</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;POST&quot;</span><span class="p">,</span> <span class="s">&quot;/sign&quot;</span><span class="p">,</span> <span class="n">handler</span><span class="p">(</span><span class="n">sign</span><span class="p">)).</span><span class="n">Name</span><span class="p">(</span><span class="s">&quot;sign&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">=</span> <span class="n">http</span><span class="p">.</span><span class="n">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:&quot;</span><span class="p">+</span><span class="n">os</span><span class="p">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">&quot;PORT&quot;</span><span class="p">),</span> <span class="n">router</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we can update the sign handler</p>

<figure class='code'><figcaption><span>handlers.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">sign</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">ctx</span> <span class="p">*</span><span class="n">Context</span><span class="p">)</span> <span class="p">(</span><span class="n">err</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">url</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">router</span><span class="p">.</span><span class="n">GetRoute</span><span class="p">(</span><span class="s">&quot;index&quot;</span><span class="p">).</span><span class="n">URL</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">http</span><span class="p">.</span><span class="n">Redirect</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusTemporaryRedirect</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reversing in Templates</h2>

<p>To reverse inside the template, we could either remember to pass the router in
as part of the template context on every invocation, or we could add a function to
the template. Since keeping track of the router through nested templates and scope
changes is a daunting task, adding a function to do the reversing is a better
option. Heres that function:</p>

<figure class='code'><figcaption><span>main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">reverse</span><span class="p">(</span><span class="n">name</span> <span class="nb">string</span><span class="p">,</span> <span class="n">things</span> <span class="p">...</span><span class="k">interface</span><span class="p">{})</span> <span class="nb">string</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//convert the things to strings</span>
</span><span class='line'>  <span class="n">strs</span> <span class="p">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nb">string</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">things</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">th</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">things</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">strs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">fmt</span><span class="p">.</span><span class="n">Sprint</span><span class="p">(</span><span class="n">th</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//grab the route</span>
</span><span class='line'>  <span class="n">u</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">router</span><span class="p">.</span><span class="n">GetRoute</span><span class="p">(</span><span class="n">name</span><span class="p">).</span><span class="n">URL</span><span class="p">(</span><span class="n">strs</span><span class="p">...)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">u</span><span class="p">.</span><span class="n">Path</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We choose to have the function panic on errors because any incorrect reversal
is a programmer error. We also accept a variadic number of interface values because
sometimes we need to have a parameter in the reversal that is an integer, like the
year on the blog post url, and the <a href="http://gorilla-web.appspot.com/pkg/mux#Route.URL">URL function</a> takes strings.
So rather than force the template to do the conversion, or the function executing the template, we
just convert everything to a string by calling <code>fmt.Sprint</code> on it. Then we have
to add this function to the template.</p>

<figure class='code'><figcaption><span>main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">funcs</span> <span class="p">=</span> <span class="n">template</span><span class="p">.</span><span class="n">FuncMap</span><span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;reverse&quot;</span><span class="p">:</span> <span class="n">reverse</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">parseTemplate</span><span class="p">(</span><span class="n">files</span> <span class="p">...</span><span class="nb">string</span><span class="p">)</span> <span class="p">*</span><span class="n">template</span><span class="p">.</span><span class="n">Template</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//create a new template named after the first file in the list and add</span>
</span><span class='line'>  <span class="c1">//the function map to it</span>
</span><span class='line'>  <span class="n">name</span> <span class="p">:=</span> <span class="n">filepath</span><span class="p">.</span><span class="n">Base</span><span class="p">(</span><span class="n">files</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="n">t</span> <span class="p">:=</span> <span class="n">template</span><span class="p">.</span><span class="n">New</span><span class="p">(</span><span class="n">name</span><span class="p">).</span><span class="n">Funcs</span><span class="p">(</span><span class="n">funcs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//parse the files into the template and panic on errors</span>
</span><span class='line'>  <span class="n">t</span> <span class="p">=</span> <span class="n">template</span><span class="p">.</span><span class="n">Must</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">ParseFiles</span><span class="p">(</span><span class="n">files</span><span class="p">...))</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">t</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">index</span> <span class="p">=</span> <span class="n">parseTemplate</span><span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;templates/_base.html&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;templates/index.html&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Theres a tricky point here: the template package will error when trying to parse
a template and it finds a function invocation to something undefined. That means
we have to add our function map to the template before we add the files to parse.
We write a little helper function to do this correctly. Now we can update the
template to use it.</p>

<pre><code>&lt;form action="{{ reverse "sign" }}" method="POST"&gt;
</code></pre>

<p>Let&#8217;s update the <code>sign</code> handler to use the reverse function too.</p>

<pre><code>http.Redirect(w, req, reverse("index"), http.StatusSeeOther)
</code></pre>

<p>Pain: consider yourself eliminated.</p>

<p>Next up, we&#8217;re going to do more with the context type we created, and make
the guestbook a little more web 2.0. As always, the source to the gostbook
is up on <a href="http://github.com/zeebo/gostbook">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick and Clean in Go]]></title>
    <link href="http://shadynasty.biz/blog/2012/07/30/quick-and-clean-in-go/"/>
    <updated>2012-07-30T11:43:00-04:00</updated>
    <id>http://shadynasty.biz/blog/2012/07/30/quick-and-clean-in-go</id>
    <content type="html"><![CDATA[<p>After reading a <a href="http://me.veekun.com/blog/2012/07/28/quick-doesnt-mean-dirty/">neat article</a> whose title I stole about making
a guestbook app in Flask, I decided to see how it would compare to my
favorite language of the year, Go. So here&#8217;s my take.</p>

<!-- more -->


<h2>First Steps</h2>

<p>Let&#8217;s create a new directory to hold the project. I&#8217;m gonna host the code on
github so let&#8217;s make the local directory match the import path.</p>

<pre><code>$ cd ~/Code/go/src
$ mkdir -p github.com/zeebo/gostbook
$ cd github.com/zeebo/gostbook/
$ git init
Initialized empty Git repository in /Users/zeebo/Code/go/src/github.com/zeebo/gostbook/.git/
</code></pre>

<p>Note that <code>~/Code/go</code> is a directory in my <a href="http://golang.org/doc/code.html#GOPATH">GOPATH</a> environment variable, the only
piece of configuration I need to do to have the build tool know how to fetch and
build any code that uses these conventions. Lets put in a little hello world code.</p>

<figure class='code'><figcaption><span>Hello World - main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">hello</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fmt</span><span class="p">.</span><span class="n">Fprintln</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="s">&quot;Hello World!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">http</span><span class="p">.</span><span class="n">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">hello</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">http</span><span class="p">.</span><span class="n">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:8080&quot;</span><span class="p">,</span> <span class="n">nil</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This registers a handler that will match any path and write
<code>Hello World!</code> in the response. Building and running this code
runs a server that listens on port 8080, so lets visit it.</p>

<pre><code>$ go build
$ ./gostbook &amp;
[1] 39629
$ curl localhost:8080
Hello World!
$ kill 39629
</code></pre>

<p>Neat!</p>

<h2>Commit</h2>

<p>Let&#8217;s do our source control duty, and make a commit with our super simple
app.</p>

<pre><code>$ cat .gitignore 
*
!.gitignore
!*.go
!*.html
$ git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#   .gitignore
#   main.go
nothing added to commit but untracked files present (use "git add" to track)
$ git add .
$ git commit -m 'initial commit'
[master (root-commit) de0b184] initial commit
 2 files changed, 21 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 main.go
</code></pre>

<h2>Templates</h2>

<p>The next step is to put templates in. Lets make a template directory
and some basic templates in there. I&#8217;ll steal the templates from
Eevee&#8217;s post and change them to use the built in <a href="http://golang.org/pkg/html/template">html/template</a>
package from the standard library. Here&#8217;s the source:</p>

<figure class='code'><figcaption><span>templates/_base.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>{{ template &quot;title&quot; . }}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">&quot;contents&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            {{ template &quot;content&quot; . }}
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>        <span class="nt">&lt;footer</span> <span class="na">id=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            My Cool Guestbook 2000 © me forever
</span><span class='line'>        <span class="nt">&lt;/footer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>templates/index.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{ define &quot;title&quot; }}Guestbook{{ end }}
</span><span class='line'>
</span><span class='line'>{{ define &quot;content&quot; }}
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Guestbook<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Hello, and welcome to my guestbook, because it&#39;s 1997!<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;guests&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>...<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>{{ end }}
</span></code></pre></td></tr></table></div></figure>


<p>Updating the Go code is a little more work, but not much.</p>

<figure class='code'><figcaption><span>Template World - main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;html/template&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">index</span> <span class="p">=</span> <span class="n">template</span><span class="p">.</span><span class="n">Must</span><span class="p">(</span><span class="n">template</span><span class="p">.</span><span class="n">ParseFiles</span><span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;templates/_base.html&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;templates/index.html&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">hello</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">index</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">nil</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Building and running again, we see it&#8217;s working:</p>

<pre><code>$ go build
$ ./gostbook &amp;
[1] 39918
$ curl localhost:8080
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
    &lt;head&gt;
        &lt;title&gt;Guestbook&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;section id="content"&gt;

    &lt;h1&gt;Guestbook&lt;/h1&gt;

    &lt;p&gt;Hello, and welcome to my guestbook, because it's 1997!&lt;/p&gt;

    &lt;ul class="guests"&gt;
        &lt;li&gt;...&lt;/li&gt;
    &lt;/ul&gt;

        &lt;/section&gt;
        &lt;footer id="footer"&gt;
            My Cool Guestbook 2000 © me forever
        &lt;/footer&gt;
    &lt;/body&gt;
&lt;/html&gt;
$ kill 39918
</code></pre>

<p>Let&#8217;s be diligent and make another commit. On to data!</p>

<h2>Databases</h2>

<p>Go has many database bindings but the one I find easiest to work with
would be MongoDB with the excellent <a href="http://go.pkgdoc.org/labix.org/v2/mgo">mgo</a> driver. Let&#8217;s create our data
model.</p>

<figure class='code'><figcaption><span>Database entry - entry.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;labix.org/v2/mgo/bson&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="n">Entry</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ID</span>        <span class="n">bson</span><span class="p">.</span><span class="n">ObjectId</span> <span class="s">`bson:&quot;_id,omitempty&quot;`</span>
</span><span class='line'>  <span class="n">Timestamp</span> <span class="n">time</span><span class="p">.</span><span class="n">Time</span>
</span><span class='line'>  <span class="n">Name</span>      <span class="nb">string</span>
</span><span class='line'>  <span class="n">Message</span>   <span class="nb">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">NewEntry</span><span class="p">()</span> <span class="p">*</span><span class="n">Entry</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">&amp;</span><span class="n">Entry</span><span class="p">{</span>
</span><span class='line'>      <span class="n">Timestamp</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="n">Now</span><span class="p">(),</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We just create a struct with some fields. The <a href="http://go.pkgdoc.org/labix.org/v2/mgo">mgo</a> driver uses runtime
reflection to look up the information about the struct for setting and reading
the values. For the ID field add some tags to it to instruct bson to omit it if
the value is empty, and name it <code>_id</code> when serializing, to have MongoDB pick the
id for us on insertion, and name it what it&#8217;s expecting. We also provide a
<code>NewEntry</code> function for creating an Entry at the current time.</p>

<p>Now lets add support to the handler.</p>

<figure class='code'><figcaption><span>Databased up - main.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">func</span> <span class="n">hello</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//grab a clone of the session and close it when the</span>
</span><span class='line'>  <span class="c1">//function returns</span>
</span><span class='line'>  <span class="n">s</span> <span class="p">:=</span> <span class="n">session</span><span class="p">.</span><span class="n">Clone</span><span class="p">()</span>
</span><span class='line'>  <span class="k">defer</span> <span class="n">s</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//set up the collection and query</span>
</span><span class='line'>  <span class="n">coll</span> <span class="p">:=</span> <span class="n">s</span><span class="p">.</span><span class="n">DB</span><span class="p">(</span><span class="s">&quot;gostbook&quot;</span><span class="p">).</span><span class="n">C</span><span class="p">(</span><span class="s">&quot;entries&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">query</span> <span class="p">:=</span> <span class="n">coll</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="n">nil</span><span class="p">).</span><span class="n">Sort</span><span class="p">(</span><span class="s">&quot;-timestamp&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//execute the query</span>
</span><span class='line'>  <span class="c1">//TODO: add pagination :)</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">entries</span> <span class="p">[]</span><span class="n">Entry</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">query</span><span class="p">.</span><span class="n">All</span><span class="p">(&amp;</span><span class="n">entries</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//execute the template</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">index</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">entries</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">session</span> <span class="p">*</span><span class="n">mgo</span><span class="p">.</span><span class="n">Session</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">err</span> <span class="n">error</span>
</span><span class='line'>  <span class="n">session</span><span class="p">,</span> <span class="n">err</span> <span class="p">=</span> <span class="n">mgo</span><span class="p">.</span><span class="n">Dial</span><span class="p">(</span><span class="s">&quot;localhost&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">http</span><span class="p">.</span><span class="n">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">hello</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">=</span> <span class="n">http</span><span class="p">.</span><span class="n">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:8080&quot;</span><span class="p">,</span> <span class="n">nil</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interacting with the databse requires a little boilerplate in the handler,
but this can easily be removed by clever use of Go&#8217;s interfaces. The <a href="http://golang.org/pkg/net/http">net/http</a>
package will serve anything with a <code>ServeHTTP(ResponseWriter, *Request)</code> method,
so you can decorate handlers by wrapping them in simple types that implement
that interface. Doing that is left as an exercise to the reader :)</p>

<p>Here&#8217;s how we change the template:</p>

<figure class='code'><figcaption><span>templates/index.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;guests&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        {{ range . }}
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;blockquote&gt;</span>{{ .Message }}<span class="nt">&lt;/blockquote&gt;</span>
</span><span class='line'>            <span class="nt">&lt;p&gt;</span>- <span class="nt">&lt;cite&gt;</span>{{ .Name }}<span class="nt">&lt;/cite&gt;</span>, <span class="nt">&lt;time&gt;</span>{{ .Timestamp }}<span class="nt">&lt;/time&gt;&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        {{ end }}
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice we don&#8217;t worry about any kind of injection. The <a href="http://golang.org/pkg/html/template">html/template</a> package
is super awesome and handles that by knowing what it&#8217;s outputing and the context
in which the data is being used. If you&#8217;re in an html context, it will escape
the html properly. If you&#8217;re in a script or url context, it knows and will apply
the appropriate esacping. No modifying the data in the database. No &#8220;sanitizing&#8221;.
Just doing the right thing, every time.</p>

<h2>Signing it</h2>

<p>Time to add the handler to sign the guest book. Let&#8217;s start with the html for
the form.</p>

<figure class='code'><figcaption><span>templates/index.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;hr&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/sign&quot;</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>Name: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>Message: <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span> <span class="na">rows=</span><span class="s">&quot;10&quot;</span> <span class="na">cols=</span><span class="s">&quot;40&quot;</span><span class="nt">&gt;&lt;/textarea&gt;&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;&lt;button&gt;</span>Sign<span class="nt">&lt;/button&gt;&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now the handler:</p>

<figure class='code'><figcaption><span>sign.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">sign</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="p">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">req</span> <span class="p">*</span><span class="n">http</span><span class="p">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//make sure we got post</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">req</span><span class="p">.</span><span class="n">Method</span> <span class="p">!=</span> <span class="s">&quot;POST&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">NotFound</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">req</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">entry</span> <span class="p">:=</span> <span class="n">NewEntry</span><span class="p">()</span>
</span><span class='line'>  <span class="n">entry</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">req</span><span class="p">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">entry</span><span class="p">.</span><span class="n">Message</span> <span class="p">=</span> <span class="n">req</span><span class="p">.</span><span class="n">FormValue</span><span class="p">(</span><span class="s">&quot;message&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">entry</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">entry</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Some dummy who forgot a name&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">entry</span><span class="p">.</span><span class="n">Message</span> <span class="p">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">entry</span><span class="p">.</span><span class="n">Message</span> <span class="p">=</span> <span class="s">&quot;Some dummy who forgot a message.&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span> <span class="p">:=</span> <span class="n">session</span><span class="p">.</span><span class="n">Clone</span><span class="p">()</span>
</span><span class='line'>  <span class="k">defer</span> <span class="n">s</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">coll</span> <span class="p">:=</span> <span class="n">s</span><span class="p">.</span><span class="n">DB</span><span class="p">(</span><span class="s">&quot;gostbook&quot;</span><span class="p">).</span><span class="n">C</span><span class="p">(</span><span class="s">&quot;entries&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">coll</span><span class="p">.</span><span class="n">Insert</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">http</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="n">Error</span><span class="p">(),</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">http</span><span class="p">.</span><span class="n">Redirect</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">http</span><span class="p">.</span><span class="n">StatusTemporaryRedirect</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All we need to do is add a single line to main.go to make it handle the new
handler:</p>

<pre><code>http.HandleFunc("/sign", sign)
</code></pre>

<p>And we can sign, and view our guestbook. Lets commit again.</p>

<h2>Some issues</h2>

<p>Now the astute reader will notice a couple little pain points.</p>

<ul>
<li><p>We had to check in the <code>sign</code> handler if the method was <code>POST</code>. This can
be fixed by using a more sophisticated muxer than the built in one in <a href="http://golang.org/pkg/net/http">net/http</a>.
Like all good packages in Go, all of these things are just interfaces and so you
can swap them out with many community driven packages. An exellent one is the
gorilla muxer at <a href="http://go.pkgdoc.org/code.google.com/p/gorilla/mux">code.google.com/p/gorilla/mux</a>.</p></li>
<li><p>We had to hard code the urls. Once again, this is solved by using a more
sophisticated muxer. <a href="http://go.pkgdoc.org/code.google.com/p/gorilla/mux">code.google.com/p/gorilla/mux</a> supports building urls
from names you give to the routes.</p></li>
<li><p>Boilerplate in the handlers to specify a database/collection every time.
I typically solve this how I wrote earlier by making a type that implements
the <code>ServeHTTP</code> method and passes in a request context containing everything
I need to use for that request, including sessions and database connections.
It&#8217;s only a couple lines of code to make, but outside the scope of this
post.</p></li>
</ul>


<p>Other than that, I found it to be pretty painless and about as easy to do as
the Flask version. Considering this is a statically typed compiled language,
that&#8217;s quite the feat.</p>

<h2>Deployment</h2>

<p>It wouldn&#8217;t be useful if it wasn&#8217;t deployed. Fortunately, Go compiles down into
a static binary. This can be shipped to any system that it was compiled for, and
just ran. Go also allows you to easily cross compile for any system, so thats a
non-issue as well. The built in web server is comparable in performance to things
like Apache and nginx from my tests. So for most cases, it&#8217;s as simple as running
a binary and either proxy passing it through from your front end server, or just
letting the world hit it directly.</p>

<p>But, since that&#8217;s not cool enough, we&#8217;re also going to deploy on <a href="http://heroku.com">Heroku</a>.</p>

<h2>Buildpacks and a Note About Getting Code</h2>

<p>Unfortunately, Go isn&#8217;t a supported platform on Heroku. Fortunately, it&#8217;s just
a buildpack away. The Cedar stack is excellent and allows you to run any binary
you want to host your web site, so we just have to tell Heroku how to build our
code. I&#8217;m a little biased so I&#8217;m going to use the <a href="http://github.com/zeebo/buildpack">buildpack I modified</a>
to do this, although there are <a href="http://github.com/kr/heroku-buildpack-go">alternatives</a>.</p>

<p>The cool part about hosting our code on github is that anyone with Go installed
can just grab it with a single command:</p>

<pre><code>go get github.com/zeebo/gostbook
</code></pre>

<p>That will download, compile, and install a binary named &#8220;gostbook&#8221; in our bin
directory in our GOPATH. The buildpack I created uses this to build the code
we&#8217;ll be deploying. First we make a little file that describes how to do it,
and a Procfile to describe what to run:</p>

<figure class='code'><figcaption><span>.heroku </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BASE=github.com/zeebo/gostbook
</span><span class='line'>+ github.com/zeebo/gostbook</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Procfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>web: bin/gostbook</span></code></pre></td></tr></table></div></figure>


<p>Then we have to be nice and listen on the port Heroku tells us to. This is
a one line change:</p>

<pre><code>if err = http.ListenAndServe(":"+os.Getenv("PORT"), nil); err != nil {
</code></pre>

<p>Lastly, we have to dail out to the mongo config they ask too:</p>

<pre><code>session, err = mgo.Dial(os.Getenv("DATABASE_URL"))
</code></pre>

<p>I use <code>DATABASE_URL</code> as the key. We&#8217;ll have to set it later in the deployment.
Let&#8217;s commit that.</p>

<h2>Deployment (again)</h2>

<p>Lets create the heroku app.</p>

<pre><code>$ heroku create --stack cedar --buildpack http://github.com/zeebo/buildpack.git
Creating tranquil-refuge-9104... done, stack is cedar
http://tranquil-refuge-9104.herokuapp.com/ | git@heroku.com:tranquil-refuge-9104.git
Git remote heroku added
</code></pre>

<p>Add in a free mongo database and configure the <code>DATABASE_URL</code>:</p>

<pre><code>$ heroku addons:add mongolab:starter
-----&gt; Adding mongolab:starter to tranquil-refuge-9104... done, v3 (free)
       Welcome to MongoLab.
$ heroku config
BUILDPACK_URL =&gt; http://github.com/zeebo/buildpack.git
MONGOLAB_URI  =&gt; ...snip...
$ heroku config:add DATABASE_URL=...snip...
Adding config vars and restarting app... done, v4
  DATABASE_URL =&gt; ...snip...
</code></pre>

<p>If I was smarter, I would have just used <code>MONGOLAB_URI</code> in the code, but I&#8217;m not
so here we are. Finally, we can just push it up and watch the magic:</p>

<pre><code>$ git push heroku master
Counting objects: 24, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (21/21), done.
Writing objects: 100% (24/24), 3.41 KiB, done.
Total 24 (delta 4), reused 0 (delta 0)

-----&gt; Heroku receiving push
-----&gt; Fetching custom buildpack... done
-----&gt; Go app detected
-----&gt; Configuration
       GO_VERSION=go1.0.2
       BASE=github.com/zeebo/gostbook
       + github.com/zeebo/gostbook
-----&gt; Using Go go1.0.2.linux-amd64
-----&gt; Fetching Go go1.0.2.linux-amd64
-----&gt; Checking for Mercurial and Bazaar
       Fetching hg and bzr
       ..snip...
       Successfully installed mercurial
       ...snip...
       Successfully installed bzr
       Cleaning up...
-----&gt; Running go get -u -v all
-----&gt; Copying sources into GOPATH/src/github.com/zeebo/gostbook
-----&gt; Running go get -v github.com/zeebo/gostbook
       Fetching https://labix.org/v2/mgo?go-get=1
       Parsing meta tags from https://labix.org/v2/mgo?go-get=1 (status code 200)
       get "labix.org/v2/mgo": found meta tag main.metaImport{Prefix:"labix.org/v2/mgo", VCS:"bzr", RepoRoot:"https://launchpad.net/mgo/v2"} at https://labix.org/v2/mgo?go-get=1
       labix.org/v2/mgo (download)
       Fetching https://labix.org/v2/mgo/bson?go-get=1
       Parsing meta tags from https://labix.org/v2/mgo/bson?go-get=1 (status code 200)
       get "labix.org/v2/mgo/bson": found meta tag main.metaImport{Prefix:"labix.org/v2/mgo", VCS:"bzr", RepoRoot:"https://launchpad.net/mgo/v2"} at https://labix.org/v2/mgo/bson?go-get=1
       get "labix.org/v2/mgo/bson": verifying non-authoritative meta tag
       Fetching https://labix.org/v2/mgo?go-get=1
       Parsing meta tags from https://labix.org/v2/mgo?go-get=1 (status code 200)
       labix.org/v2/mgo/bson
       labix.org/v2/mgo
       github.com/zeebo/gostbook
-----&gt; Discovering process types
       Procfile declares types -&gt; web
-----&gt; Compiled slug size is 1.4MB
-----&gt; Launching... done, v6
       http://tranquil-refuge-9104.herokuapp.com deployed to Heroku

To git@heroku.com:tranquil-refuge-9104.git
 * [new branch]      master -&gt; master
</code></pre>

<p>And we have a nice guestbook at <a href="http://tranquil-refuge-9104.herokuapp.com">http://tranquil-refuge-9104.herokuapp.com</a></p>

<h2>A snag</h2>

<p>It seems like the database name is specified by the host in this case. We can&#8217;t
just go and create whatever database we want. So we have to update the code to
grab this information and use it when we&#8217;re making queries. The patch to fix it
was pretty easy. Just add a global variable and parse the URL to put the database
into it.</p>

<figure class='code'><figcaption><span>commit.diff </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/main.go b/main.go</span>
</span><span class='line'><span class="gh">index 6094df8..eea1565 100644</span>
</span><span class='line'><span class="gd">--- a/main.go</span>
</span><span class='line'><span class="gi">+++ b/main.go</span>
</span><span class='line'><span class="gu">@@ -4,6 +4,7 @@ import (</span>
</span><span class='line'>  &quot;html/template&quot;
</span><span class='line'>  &quot;labix.org/v2/mgo&quot;
</span><span class='line'>  &quot;net/http&quot;
</span><span class='line'><span class="gi">+    &quot;net/url&quot;</span>
</span><span class='line'>  &quot;os&quot;
</span><span class='line'> )
</span><span class='line'>
</span><span class='line'><span class="gu">@@ -19,7 +20,7 @@ func hello(w http.ResponseWriter, req *http.Request) {</span>
</span><span class='line'>  defer s.Close()
</span><span class='line'>
</span><span class='line'>  //set up the collection and query
</span><span class='line'><span class="gd">-    coll := s.DB(&quot;gostbook&quot;).C(&quot;entries&quot;)</span>
</span><span class='line'><span class="gi">+    coll := s.DB(database).C(&quot;entries&quot;)</span>
</span><span class='line'>  query := coll.Find(nil).Sort(&quot;-timestamp&quot;)
</span><span class='line'>
</span><span class='line'>  //execute the query
</span><span class='line'><span class="gu">@@ -38,10 +39,17 @@ func hello(w http.ResponseWriter, req *http.Request) {</span>
</span><span class='line'> }
</span><span class='line'>
</span><span class='line'> var session *mgo.Session
</span><span class='line'><span class="gi">+var database string</span>
</span><span class='line'>
</span><span class='line'> func main() {
</span><span class='line'>  var err error
</span><span class='line'><span class="gd">-    session, err = mgo.Dial(os.Getenv(&quot;DATABASE_URL&quot;))</span>
</span><span class='line'><span class="gi">+    u := os.Getenv(&quot;DATABASE_URL&quot;)</span>
</span><span class='line'><span class="gi">+    parsed, err := url.Parse(u)</span>
</span><span class='line'><span class="gi">+    if err != nil {</span>
</span><span class='line'><span class="gi">+        panic(err)</span>
</span><span class='line'><span class="gi">+    }</span>
</span><span class='line'><span class="gi">+    database = parsed.Path[1:]</span>
</span><span class='line'><span class="gi">+    session, err = mgo.Dial(u)</span>
</span><span class='line'>  if err != nil {
</span><span class='line'>      panic(err)
</span><span class='line'>  }
</span><span class='line'><span class="gh">diff --git a/sign.go b/sign.go</span>
</span><span class='line'><span class="gh">index a5b6cd0..c3ddbda 100644</span>
</span><span class='line'><span class="gd">--- a/sign.go</span>
</span><span class='line'><span class="gi">+++ b/sign.go</span>
</span><span class='line'><span class="gu">@@ -23,7 +23,7 @@ func sign(w http.ResponseWriter, req *http.Request) {</span>
</span><span class='line'>  s := session.Clone()
</span><span class='line'>  defer s.Close()
</span><span class='line'>
</span><span class='line'><span class="gd">-    coll := s.DB(&quot;gostbook&quot;).C(&quot;entries&quot;)</span>
</span><span class='line'><span class="gi">+    coll := s.DB(database).C(&quot;entries&quot;)</span>
</span><span class='line'>  if err := coll.Insert(entry); err != nil {
</span><span class='line'>      http.Error(w, err.Error(), http.StatusInternalServerError)
</span><span class='line'>      return
</span></code></pre></td></tr></table></div></figure>


<p>We just rely on the <a href="http://golang.org/pkg/net/url">net/url</a> package to parse the url and grab the database
out of the path argument. Since the path contains the leading forward slash, we
just slice that off. All thats left is a redeploy:</p>

<pre><code>$ git add .
$ git commit -m 'fixes for database'
[master 2b4bf78] fixes for database
 2 files changed, 11 insertions(+), 3 deletions(-)
$ git push heroku master
Counting objects: 7, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 493 bytes, done.
Total 4 (delta 3), reused 0 (delta 0)

-----&gt; Heroku receiving push
-----&gt; Fetching custom buildpack... done
-----&gt; Go app detected
-----&gt; Configuration
       GO_VERSION=go1.0.2
       BASE=github.com/zeebo/gostbook
       + github.com/zeebo/gostbook
-----&gt; Using Go go1.0.2.linux-amd64
-----&gt; Checking for Mercurial and Bazaar
       /app/tmp/repo.git/.cache/venv/bin/hg
       /app/tmp/repo.git/.cache/venv/bin/bzr
-----&gt; Running go get -u -v all
-----&gt; Copying sources into GOPATH/src/github.com/zeebo/gostbook
-----&gt; Running go get -v github.com/zeebo/gostbook
       github.com/zeebo/gostbook
-----&gt; Discovering process types
       Procfile declares types -&gt; web
-----&gt; Compiled slug size is 1.4MB
-----&gt; Launching... done, v7
       http://tranquil-refuge-9104.herokuapp.com deployed to Heroku

To git@heroku.com:tranquil-refuge-9104.git
   52a2171..2b4bf78  master -&gt; master
</code></pre>

<p>And to my surprise, it worked on the second try!</p>

<h2>Closing remarks</h2>

<p>I hope this post showed some of what can be done with Go. In little time and
code I was able to construct that awesome 1997 guestbook. This just scratched
the surface of the cool stuff going on in the Go ecosystem. There&#8217;s <a href="http://github.com/nsf/gocode">code competion</a>,
<a href="http://github.com/DisposaBoy/GoSublime">sublime text integration</a>, <a href="http://go.pkgdoc.org">hosted automatically generated documentation</a>, and
<a href="http://goci.me">continuous integration</a>. The Go tool is awesome and able to build the vast majority
of Go code that lives anywhere with one command. I highly recommend looking into
Go for your next project.</p>
]]></content>
  </entry>
  
</feed>
